Parameters:
  VPC:
    Description: Attache the VPC
    Type: AWS::EC2::VPC::Id
  Subnets:
    Description: My Subnets (3 subnets are mandatory)
    Type: List<AWS::EC2::Subnet::Id>
  EnvironmentValue:
    Description: Environment Tyep
    Type: String
    Default: Stage
    AllowedValues:
      - Dev 
      - QA
      - Stage
      - Prod
    ConstraintDescription: must specify the Envirorment
  RoleName:
    Type: String
    Description: Add to name of Role If the Enviorment value is NOT prod
#Not Reqiuered
# Conditions:
#   CreateDevResources: !Equals
#     - !Ref EnvironmentValue
#     - Dev
#   CreateQAResources: !Equals
#     - !Ref EnvironmentValue
#     - QA
#   CreateStageResources: !Equals
#     - !Ref EnvironmentValue
#     - Stage
#   CreateProdResources: !Equals 
#     - !Ref EnvironmentValue
#     - Prod

Mappings: 
  RegionMap: 
    eu-central-1: 
      "HVM64": "ami-05f7491af5eef733a"
    us-west-2: 
      "HVM64": "ami-05f7491af5eef733a"
  Environments:
    Dev:  
      ASMAX: 5 
      ASMIN: 1
    Stage:
      ASMAX: 5 
      ASMIN: 1
    QA:  
      ASMAX: 5 
      ASMIN: 1
    Prod:  
      ASMAX: 5 
      ASMIN: 2
Resources:
  MyRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      RoleName: !If [CreateProdResources, !Ref RoleName, NonProdRole123456789]
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  MyIamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: MyIamInstanceProfile
      Path: "/"
      Roles:
      - !Ref MyRole
  
  SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP port
      GroupName: !Sub ${AWS::StackName}-Security-Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: TigranHambardzumyan
        - Key: ResourceName
          Value: TigranHambardzumyan    
      VpcId: !Ref VPC    

  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: My Auto Scaling Group
      VPCZoneIdentifier:
       - !Select [ 0, !Ref Subnets ]
       - !Select [ 1, !Ref Subnets ]
       - !Select [ 2, !Ref Subnets ]
      Cooldown: 300
      MinSize: 1
      MaxSize: 5
      DesiredCapacity: 1
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber 
      # LoadBalancerNames: !Ref LoadBalancer
      TargetGroupARNs:
        - Ref: TargetGroup
        # - arn:aws:elasticloadbalancing:eu-central-1:482720962971:targetgroup/TargetGroupTigranHambardzumyan/ef9c74ba081f1061  
      Tags:
        - Key: Name
          Value: TigranHambardzumyan
          PropagateAtLaunch: "true"
        - Key: ResourceName
          Value: TigranHambardzumyan
          PropagateAtLaunch: "true"
  
  myLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData: 

        IamInstanceProfile:
          Arn: !GetAtt
            - MyIamInstanceProfile
            - Arn
        ImageId:  !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
        InstanceType: t2.micro
        KeyName: Tigran
        SecurityGroupIds: 
          - !Ref SG 
        UserData:
           Fn::Base64: !Sub |
              #!/bin/bash
              apt update -y
              apt upgrade -y
              apt install -y apache2
              systemctl start apache2
              systemctl enable apache2
              chmod 777 /var/www/html -R
              echo "<h1>This is the host Name: $(hostname -f)</h1>" > /var/www/html/index.html

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: NetworkLB
      Scheme: internet-facing
      Subnets:
        - !Select [ 0, !Ref Subnets ]
        - !Select [ 1, !Ref Subnets ]
        - !Select [ 2, !Ref Subnets ]
      Type: network
     
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: TCP     
     
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub ${AWS::StackName}-TargetGroup
      Port: 80
      Protocol: TCP
      VpcId: !Ref VPC     



  myScalingPlan:
    Type: AWS::AutoScalingPlans::ScalingPlan
    Properties:
      ApplicationSource:
        TagFilters:
          - Key: Name
            Values:
              - TigranHambardzumyan
      ScalingInstructions:
        - MinCapacity: !FindInMap [Environments, !Ref EnvironmentValue, ASMIN]
          MaxCapacity: !FindInMap [Environments, !Ref EnvironmentValue, ASMAX]
          ServiceNamespace: autoscaling
          ScalableDimension: autoscaling:autoScalingGroup:DesiredCapacity
          ResourceId: !Join
            - /
            - - autoScalingGroup
              - !Ref myASG

          TargetTrackingConfigurations:   
            - CustomizedScalingMetricSpecification:
                # Dimensions: 
                #  - MetricDimension
                MetricName: MetricName
                Namespace: Namespace
                Statistic: Average
              TargetValue: 5
          # TargetTrackingConfigurations:
          #   - PredefinedScalingMetricSpecification: #change to Custom
          #       PredefinedScalingMetricType: "ALBRequestCountPerTarget"
          #       # ResourceLabel: [ !GetAtt LoadBalancer.LoadBalancerFullName/TargetGroup.TargetGroupFullName ]
          #       # ResourceLabel: $(!GetAtt LoadBalancer.FullName)/$(!GetAtt TargetGroup.TargetGroupFullName)
          #       ResourceLabel: !Join [ '/', [!GetAtt LoadBalancer.LoadBalancerFullName, !GetAtt TargetGroup.TargetGroupFullName] ]
          #     TargetValue: 5
          #     EstimatedInstanceWarmup: 60
          CustomizedLoadMetricSpecification:
            MetricName: "ALBTargetGroupRequestCount"
            Namespace: Namespace
            Statistic: Sum
          PredictiveScalingMode: "ForecastOnly"
          PredictiveScalingMaxCapacityBehavior: "SetMaxCapacityAboveForecastCapacity"
          PredictiveScalingMaxCapacityBuffer: 25
          ScheduledActionBufferTime: 600     
     
#Instead of Parametrs create a Security Group!!!  +
#configure LB with CPU +
#Create a map for AMI
#It isn't secure Change It!! sudo chmod 777 /var/www/html -R
#Add Conditions and read the guide
      # Subnets:
      #   - !Select [ 0, !Ref Subnets ]
      #   - !Select [ 1, !Ref Subnets ]
      #   - !Select [ 2, !Ref Subnets ]
      # Type: network
#Try to create custom ScalingMetricType      
#Create a new stack with existing CPU avarge .., when the load is ok, decrise the EC2 instancesa counts to 5 current -
# надо добавить текстовый параметр в клаудформейшен,
# и сделать так чтобы он добавлялся к имени роли только в том случае если енв не прод
